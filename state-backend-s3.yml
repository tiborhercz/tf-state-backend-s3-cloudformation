AWSTemplateFormatVersion: "2010-09-09"
Description: "Template for creating a S3 bucket for storing the Terraform state and DynamoDB table locking the state"
Parameters:
  ReplicationBucketRegion:
    Type: String
    Description: "The region where the Replication bucket is deployed. Example value: 'eu-west-1'"
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - roleReplication
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub 'tf-state-bucket-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      ReplicationConfiguration:
        Role: !GetAtt roleReplication.Arn
        Rules:
          - Destination:
              Bucket: !Join [ '', [ 'arn:aws:s3:::', !Sub 'tf-state-replication-bucket-${AWS::AccountId}-${ReplicationBucketRegion}' ] ]
            Id: ReplicationRule
            Prefix: ''
            Status: Enabled

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
        - Sid: Deny deletion of objects
          Effect: Deny
          Principal: "*"
          Action:
            - "s3:DeleteObject"
          Resource: !Join [ '/', [ !GetAtt S3Bucket.Arn, '*' ] ]
        - Sid: Deny requests that do not use TLS
          Effect: Deny
          Principal: '*'
          Action:
            - "s3:*"
          Resource: !Join [ '/', [ !GetAtt S3Bucket.Arn, '*' ] ]
          Condition:
            Bool:
              'aws:SecureTransport': 'false'
        - Sid: Deny object uploads not using default encryption settings
          Effect: Deny
          Principal: '*'
          Action:
            - "s3:PutObject"
          Resource: !Join [ '/', [ !GetAtt S3Bucket.Arn, '*' ] ]
          Condition:
            # The Null-condition allows uploads without encryption information in the request
            # (i.e., requests with default S3 bucket encryption) and the
            # StringNotEquals-condition denies uploads with invalid encryption information.
            # Note that using StringNotEqualsIfExists doesnâ€™t work for uploads without encryption information.
            # The condition evaluates to true and denies the upload because of the Deny-effect.
            'Null':
              s3:x-amz-server-side-encryption: false
            StringNotEqualsIfExists:
              s3:x-amz-server-side-encryption:
                - 'AES256'
                - 'aws:kms'

  roleReplication:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: s3-replication-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetReplicationConfiguration'
                  - 's3:GetObjectVersionForReplication'
                  - 's3:GetObjectVersionAcl'
                Resource: # source bucket
                  - !Join [ '', [  'arn:aws:s3:::', !Sub 'tf-state-bucket-${AWS::AccountId}-${AWS::Region}' ] ]
                  - !Join [ '', [  'arn:aws:s3:::', !Sub 'tf-state-bucket-${AWS::AccountId}-${AWS::Region}', '/*' ] ]
              - Effect: Allow
                Action:
                  - 's3:ReplicateObject'
                  - 's3:ReplicateDelete'
                  - 's3:ReplicateTags'
                  - 's3:GetObjectVersionTagging'
                  - 's3:GetBucketVersioning'
                  - 's3:PutBucketVersioning'
                Resource: # destination bucket
                  - !Join [ '', [ 'arn:aws:s3:::', !Sub 'tf-state-replication-bucket-${AWS::AccountId}-${ReplicationBucketRegion}' ] ]
                  - !Join [ '', [ 'arn:aws:s3:::', !Sub 'tf-state-replication-bucket-${AWS::AccountId}-${ReplicationBucketRegion}', '/*' ] ]

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub tf-state-table-${AWS::AccountId}
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: LockID
          AttributeType: S
      KeySchema:
        - AttributeName: LockID
          KeyType: HASH
      SSESpecification:
        SSEEnabled: true
      Tags:
        # Cloudformation doesn't support automatically tagging of DynamoDB
        - Key: aws-cloudformation-logical-id
          Value: "TerraformStateLockDynamoDBTable"
        - Key: aws-cloudformation-stack-id
          Value: !Ref "AWS::StackId"
        - Key: aws-cloudformation-stack-name
          Value: !Ref "AWS::StackName"

Outputs:
  TerraformStateS3BucketName:
    Value: !Sub 'tf-state-bucket-${AWS::AccountId}-${AWS::Region}'
    Description: Name of the S3 bucket
  TerraformStateLockDynamoDBTableName:
    Value: !Sub tf-state-table-${AWS::AccountId}
    Description: Name of the DynamoDB table
